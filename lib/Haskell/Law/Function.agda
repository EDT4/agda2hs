module Haskell.Law.Function where

open import Haskell.Prim
open import Haskell.Law.Equality


{-|
Pointwise equality on functions.
This says that two functions produce the same
result for all input values.
-}
infix 4 _โ_
_โ_ : โ {A B : Set} (f g : A โ B) โ Set
f โ g = โ a โ f a โก g a

Commutative : {a : Set} โ (a โ a โ a) โ Set
Commutative _+_ = โ x y โ x + y โก y + x

Associative : {a : Set} โ (a โ a โ a) โ Set
Associative _+_ = โ x y z โ (x + y) + z โก x + (y + z)

Identityหก : {a : Set} โ (a โ a โ a) โ a โ Set
Identityหก _+_ ๐ = โ x โ ๐ + x โก x

Identityสณ : {a : Set} โ (a โ a โ a) โ a โ Set
Identityสณ _+_ ๐ = โ x โ x + ๐ โก x

Distributiveหก : {a : Set} โ (_+_ : a โ a โ a) โ (_*_ : a โ a โ a) โ Set
Distributiveหก _+_ _*_ = โ x y z โ x * (y + z) โก (x * y) + (x * z)

Distributiveสณ : {a : Set} โ (_+_ : a โ a โ a) โ (_*_ : a โ a โ a) โ Set
Distributiveสณ _+_ _*_ =  โ x y z โ (y + z) * x โก (y * x) + (z * x)

{-|
Definition of homomorphism over unary functions.
A function ฯ is homomorphic w.r.t. some function or structure f
when it preserves this structure in its target domain b
(where this structure is called g).
-}
Homomorphismโ : โ {a b : Set} (f : a โ a) (g : b โ b)
  โ (ฯ : a โ b) โ Set
Homomorphismโ f g ฯ = ฯ โ f โ g โ ฯ

{-|
Definition of homomorphism over binary functions.
A function ฯ is homomorphic w.r.t. some structure _+แต_
when it preserves this structure in its target domain b
(where this structure is called _+แต_).
-}
Homomorphismโ : โ {a b : Set} (_+แต_ : a โ a โ a) (_+แต_ : b โ b โ b)
  โ (ฯ : a โ b) โ Set
Homomorphismโ _+แต_ _+แต_ ฯ = โ x y โ ฯ (x +แต y) โก ฯ x +แต ฯ y

record Embeddingโ {a b : Set} (_+แต_ : a โ a โ a) (_+แต_ : b โ b โ b) (ฯ : a โ b) (ฯโปยน : b โ a) : Set where
  field
    hom   : Homomorphismโ _+แต_ _+แต_ ฯ
    embed : ฯโปยน โ ฯ โ id

record MonoidEmbeddingโ {a b : Set} (_+แต_ : a โ a โ a) (_+แต_ : b โ b โ b) (ฯ : a โ b) (ฯโปยน : b โ a) (0แต : a) (0แต : b) : Set where
  field
    embedding : Embeddingโ _+แต_ _+แต_ ฯ ฯโปยน
    0-hom     : ฯ 0แต โก 0แต

map-comm : โ {a b : Set} (_+แต_ : a โ a โ a) (_+แต_ : b โ b โ b) (ฯ : a โ b) (ฯโปยน : b โ a)
  โ Embeddingโ _+แต_ _+แต_ ฯ ฯโปยน
  โ Commutative _+แต_
  โ Commutative _+แต_
map-comm _+แต_ _+แต_ ฯ ฯโปยน proj comm x y =
  begin
    x +แต y
  โกหโจ embed (x +แต y) โฉ
    ฯโปยน (ฯ (x +แต y))
  โกโจ cong ฯโปยน (hom x y) โฉ
    ฯโปยน (ฯ x +แต ฯ y)
  โกโจ cong ฯโปยน (comm (ฯ x) (ฯ y)) โฉ
    ฯโปยน (ฯ y +แต ฯ x)
  โกหโจ cong ฯโปยน (hom y x) โฉ
    ฯโปยน (ฯ (y +แต x))
  โกโจ embed (y +แต x) โฉ
    y +แต x
  โ
  where
    open Embeddingโ proj

map-assoc : โ {a b : Set} (_+แต_ : a โ a โ a) (_+แต_ : b โ b โ b) (ฯ : a โ b) (ฯโปยน : b โ a)
  โ Embeddingโ _+แต_ _+แต_ ฯ ฯโปยน
  โ Associative _+แต_
  โ Associative _+แต_
map-assoc _+แต_ _+แต_ ฯ ฯโปยน proj assoc x y z =
  begin
    (x +แต y) +แต z
  โกโจ sym (embed ((x +แต y) +แต z)) โฉ
    ฯโปยน (ฯ ((x +แต y) +แต z))
  โกโจ cong ฯโปยน (hom (x +แต y) z) โฉ
    ฯโปยน (ฯ (x +แต y) +แต ฯ z)
  โกโจ cong ฯโปยน (cong (_+แต ฯ z) (hom x y)) โฉ
    ฯโปยน ((ฯ x +แต ฯ y) +แต ฯ z)
  โกโจ cong ฯโปยน (assoc (ฯ x) (ฯ y) (ฯ z)) โฉ
    ฯโปยน (ฯ x +แต (ฯ y +แต ฯ z))
  โกโจ cong ฯโปยน (cong (ฯ x +แต_) (sym (hom y z))) โฉ
    ฯโปยน (ฯ x +แต ฯ (y +แต z))
  โกโจ cong ฯโปยน (sym (hom x (y +แต z))) โฉ
    ฯโปยน (ฯ (x +แต (y +แต z)))
  โกโจ embed (x +แต (y +แต z)) โฉ
    x +แต (y +แต z)
  โ
  where
    open Embeddingโ proj

map-idหก : โ {a b : Set} (_+แต_ : a โ a โ a) (_+แต_ : b โ b โ b) (ฯ : a โ b) (ฯโปยน : b โ a) (0แต : a) (0แต : b)
  โ MonoidEmbeddingโ _+แต_ _+แต_ ฯ ฯโปยน 0แต 0แต
  โ Identityหก _+แต_ 0แต
  โ Identityหก _+แต_ 0แต
map-idหก _+แต_ _+แต_ f g 0แต 0แต membed idหก x =
  0แต +แต x         โกโจ sym (embed (0แต +แต x)) โฉ
  g (f (0แต +แต x)) โกโจ cong g (hom 0แต x) โฉ
  g (f 0แต +แต f x) โกโจ cong g (cong (_+แต f x) 0-hom) โฉ
  g (0แต +แต f x)   โกโจ cong g (idหก (f x)) โฉ
  g (f x)        โกโจ embed x โฉ
  x              โ
  where
    open MonoidEmbeddingโ membed
    open Embeddingโ embedding

map-idสณ : โ {a b : Set} (_+แต_ : a โ a โ a) (_+แต_ : b โ b โ b) (ฯ : a โ b) (ฯโปยน : b โ a) (0แต : a) (0แต : b)
  โ MonoidEmbeddingโ _+แต_ _+แต_ ฯ ฯโปยน 0แต 0แต
  โ Identityสณ _+แต_ 0แต
  โ Identityสณ _+แต_ 0แต
map-idสณ _+แต_ _+แต_ f g 0แต 0แต membed idสณ x =
  x +แต 0แต         โกโจ sym (embed (x +แต 0แต)) โฉ
  g (f (x +แต 0แต)) โกโจ cong g (hom x 0แต) โฉ
  g (f x +แต f 0แต) โกโจ cong g (cong (f x +แต_) 0-hom) โฉ
  g (f x +แต 0แต)   โกโจ cong g (idสณ (f x)) โฉ
  g (f x)        โกโจ embed x โฉ
  x              โ
  where
    open MonoidEmbeddingโ membed
    open Embeddingโ embedding

module _ {a b : Set}
  (_+แต_ : a โ a โ a) (_+แต_ : b โ b โ b)
  (_*แต_ : a โ a โ a) (_*แต_ : b โ b โ b)
  (f : a โ b) (g : b โ a)
  (embed : g โ f โ id)
  (+-hom : Homomorphismโ _+แต_ _+แต_ f)
  (*-hom : Homomorphismโ _*แต_ _*แต_ f)
  where

  map-distributeหก : Distributiveหก _+แต_ _*แต_ โ Distributiveหก _+แต_ _*แต_
  map-distributeหก distributeหก-b x y z =
    x *แต (y +แต z)                    โกหโจ embed (x *แต (y +แต z)) โฉ
    g (f (x *แต (y +แต z)))            โกโจ cong g (*-hom x (y +แต z)) โฉ
    g (f x *แต f (y +แต z))            โกโจ cong g (cong (f x *แต_) (+-hom y z)) โฉ
    g (f x *แต (f y +แต f z))          โกโจ cong g (distributeหก-b (f x) (f y) (f z)) โฉ
    g ((f x *แต f y) +แต (f x *แต f z)) โกหโจ cong g (cong (_+แต (f x *แต f z)) (*-hom x y)) โฉ
    g (f (x *แต y) +แต (f x *แต f z))   โกหโจ cong g (cong (f (x *แต y) +แต_) (*-hom x z)) โฉ
    g (f (x *แต y) +แต f (x *แต z))     โกหโจ cong g (+-hom (x *แต y) (x *แต z)) โฉ
    g (f ((x *แต y) +แต (x *แต z)))     โกโจ embed ((x *แต y) +แต (x *แต z)) โฉ
    (x *แต y) +แต (x *แต z)             โ

  map-distributeสณ : Distributiveสณ _+แต_ _*แต_ โ Distributiveสณ _+แต_ _*แต_
  map-distributeสณ distributeสณ-b x y z =
    (y +แต z) *แต x                    โกหโจ embed ((y +แต z) *แต x) โฉ
    g (f ((y +แต z) *แต x))            โกโจ cong g (*-hom (y +แต z) x) โฉ
    g (f (y +แต z) *แต f x)            โกโจ cong g (cong (_*แต f x) (+-hom y z)) โฉ
    g ((f y +แต f z) *แต f x)          โกโจ cong g (distributeสณ-b (f x) (f y) (f z)) โฉ
    g ((f y *แต f x) +แต (f z *แต f x)) โกหโจ cong g (cong (_+แต (f z *แต f x)) (*-hom y x)) โฉ
    g (f (y *แต x) +แต (f z *แต f x))   โกหโจ cong g (cong (f (y *แต x) +แต_) (*-hom z x)) โฉ
    g (f (y *แต x) +แต f (z *แต x))     โกหโจ cong g (+-hom (y *แต x) (z *แต x)) โฉ
    g (f ((y *แต x) +แต (z *แต x)))     โกโจ embed ((y *แต x) +แต (z *แต x)) โฉ
    (y *แต x) +แต (z *แต x)             โ
